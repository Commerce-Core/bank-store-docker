map $http_cookie $wp_user_logged_in {
    default 0;

    "~wordpress_logged_in_" 1;
}

log_format  cc_custom '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
#                  'Cookies: "$http_cookie" '
                  'WP user logged in: "$wp_user_logged_in" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

# AVIF and WEBP Image Optimizer for Nginx

# Define maps for AVIF and WebP based on browser support
map $http_accept $avif_support {
    default         "";
    "~*image/avif"  ".avif";
}

map $http_accept $webp_support {
    default         "";
    "~*image/webp"  ".webp";
}

map $http_origin $cors {
  default                           "";
  "~^https?://loc\.shopperoc\.loc$" $http_origin;
  "~^https?://(track|www)\.localhost$"    $http_origin;
}

server {
    listen 80;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name localhost loc.shopperoc.loc track.localhost;

    ssl_certificate /etc/nginx/ssl/localhost/server.crt;
    ssl_certificate_key /etc/nginx/ssl/localhost/server.key;

    root /app/public;
    index index.html index.php;

    access_log /var/log/nginx/access.log cc_custom;
    error_log /var/log/nginx/error.log;

    # ToDo adjust to exclude wp-json routes from this rule
    #rewrite ^([^.]*[^/])$ $1/ permanent;

    location / {
        if ($wp_user_logged_in) {
            error_page 598 = @default;
            return 598;
        }

        # cached resources
        root /app/public/wp-content/cache/cc;
        error_page 401 403 404 = @default;
        error_page 500 502 503 504 = @default;
    }

    # Basic auth for /wp-admin, uncomment to apply
#    location /wp-admin {
#        auth_basic "Restricted Area";
#        auth_basic_user_file /etc/nginx/conf.d/.htpass;
#    }

    # deny access to default /wp-login.php, uncomment to apply
    # location = /wp-login.php {
    #     deny all;
    #     return 403;
    # }

    location /wp-content/cache/cc {
        access_log off;
        log_not_found off;
        rewrite wp-content\/cache\/cc(.*)$ / permanent;
    }

    location /wp-content/app/submodules/wp-checkout-plugin {
        rewrite wp-content\/app/submodules\/wp-checkout-plugin(.*?\.\w+$) /wp-content/plugins/wp-checkout-plugin$1;
    }

    location /docs {
        rewrite ^([^.]*[^/])$ $1/ permanent;
    }

    location @default {
        try_files $uri $uri/ /index.php?$args;
    }

    # disable Access-Control-Allow-Origin for resources for local development to avoid CORS in case of external checkout
    location ~* \.(eot|otf|ttf|woff|woff2|js|css|svg)$ {
        #add_header Access-Control-Allow-Origin *;

        # Attach CORS headers only if it's a valid origin ($cors should not be empty)
        if ($cors != "") {
          add_header Access-Control-Allow-Origin $cors always;
          #add_header 'Access-Control-Allow-Credentials' 'true' always;
          #add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
          #add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With' always;

          expires max;
        }
    }

    # deny access to WordPress xmlrpc:
    location = /xmlrpc.php {
        deny all;
        access_log off;
        log_not_found off;
        return 403;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    # Image optimization location block
    location ~* \.(jpg|jpeg|png)$ {
        add_header Vary Accept;

        # Try AVIF, WebP, or fallback to original image
        try_files $uri$avif_support $uri$webp_support $uri =404;
    }
}